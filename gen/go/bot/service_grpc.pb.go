// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: bot/service.proto

package bot

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	CallBack(ctx context.Context, in *CallBackRequest, opts ...grpc.CallOption) (*CallBackResponse, error)
	CreateBuyOrder(ctx context.Context, in *CreateBuyOrderRequest, opts ...grpc.CallOption) (*CreateBuyOrderResponse, error)
	CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderResponse, error)
	CreateSellOrder(ctx context.Context, in *CreateSellOrderRequest, opts ...grpc.CallOption) (*CreateSellOrderResponse, error)
	Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	UpdateUserSetting(ctx context.Context, in *UpdateUserSettingRequest, opts ...grpc.CallOption) (*UpdateUserSettingResponse, error)
	GetUserSetting(ctx context.Context, in *GetUserSettingRequest, opts ...grpc.CallOption) (*GetUserSettingResponse, error)
	GetUserStat(ctx context.Context, in *GetUserStatRequest, opts ...grpc.CallOption) (*GetUserStatResponse, error)
	GetUserPositions(ctx context.Context, in *GetUserPositionsRequest, opts ...grpc.CallOption) (*GetUserPositionsResponse, error)
	GetUserOperations(ctx context.Context, in *GetUserOperationsRequest, opts ...grpc.CallOption) (*GetUserOperationsResponse, error)
	GetUserOperationHistory(ctx context.Context, in *GetUserOperationHistoryRequest, opts ...grpc.CallOption) (*GetUserOperationHistoryResponse, error)
	GetUserInvites(ctx context.Context, in *GetUserInvitesRequest, opts ...grpc.CallOption) (*GetUserInvitesResponse, error)
	GetUserWallet(ctx context.Context, in *GetUserWalletRequest, opts ...grpc.CallOption) (*GetUserWalletResponse, error)
	CreateUserPayment(ctx context.Context, in *CreateUserPaymentRequest, opts ...grpc.CallOption) (*CreateUserPaymentResponse, error)
	GetUserPaymentStatus(ctx context.Context, in *GetUserPaymentStatusRequest, opts ...grpc.CallOption) (*GetUserPaymentStatusResponse, error)
	CheckUserKeys(ctx context.Context, in *CheckUserKeysRequest, opts ...grpc.CallOption) (*CheckUserKeysResponse, error)
	CallBackPayment(ctx context.Context, in *CallBackPaymentRequest, opts ...grpc.CallOption) (*CallBackPaymentResponse, error)
	SwitchBotState(ctx context.Context, in *SwitchBotStateRequest, opts ...grpc.CallOption) (*SwitchBotStateResponse, error)
	GetSymbols(ctx context.Context, in *GetSymbolsRequest, opts ...grpc.CallOption) (*GetSymbolsResponse, error)
	IntegrationGetUser(ctx context.Context, in *IntegrationGetUsersSecureRequest, opts ...grpc.CallOption) (*IntegrationGetUsersSecureResponse, error)
	IntegrationUserStatus(ctx context.Context, in *IntegrationUserStatusRequest, opts ...grpc.CallOption) (*IntegrationUserStatusResponse, error)
	IntegrationUserStatistics(ctx context.Context, in *IntegrationUserStatisticsRequest, opts ...grpc.CallOption) (*IntegrationUserStatisticsResponse, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) CallBack(ctx context.Context, in *CallBackRequest, opts ...grpc.CallOption) (*CallBackResponse, error) {
	out := new(CallBackResponse)
	err := c.cc.Invoke(ctx, "/bot.Service/CallBack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CreateBuyOrder(ctx context.Context, in *CreateBuyOrderRequest, opts ...grpc.CallOption) (*CreateBuyOrderResponse, error) {
	out := new(CreateBuyOrderResponse)
	err := c.cc.Invoke(ctx, "/bot.Service/CreateBuyOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderResponse, error) {
	out := new(CancelOrderResponse)
	err := c.cc.Invoke(ctx, "/bot.Service/CancelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CreateSellOrder(ctx context.Context, in *CreateSellOrderRequest, opts ...grpc.CallOption) (*CreateSellOrderResponse, error) {
	out := new(CreateSellOrderResponse)
	err := c.cc.Invoke(ctx, "/bot.Service/CreateSellOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/bot.Service/Auth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, "/bot.Service/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateUserSetting(ctx context.Context, in *UpdateUserSettingRequest, opts ...grpc.CallOption) (*UpdateUserSettingResponse, error) {
	out := new(UpdateUserSettingResponse)
	err := c.cc.Invoke(ctx, "/bot.Service/UpdateUserSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetUserSetting(ctx context.Context, in *GetUserSettingRequest, opts ...grpc.CallOption) (*GetUserSettingResponse, error) {
	out := new(GetUserSettingResponse)
	err := c.cc.Invoke(ctx, "/bot.Service/GetUserSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetUserStat(ctx context.Context, in *GetUserStatRequest, opts ...grpc.CallOption) (*GetUserStatResponse, error) {
	out := new(GetUserStatResponse)
	err := c.cc.Invoke(ctx, "/bot.Service/GetUserStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetUserPositions(ctx context.Context, in *GetUserPositionsRequest, opts ...grpc.CallOption) (*GetUserPositionsResponse, error) {
	out := new(GetUserPositionsResponse)
	err := c.cc.Invoke(ctx, "/bot.Service/GetUserPositions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetUserOperations(ctx context.Context, in *GetUserOperationsRequest, opts ...grpc.CallOption) (*GetUserOperationsResponse, error) {
	out := new(GetUserOperationsResponse)
	err := c.cc.Invoke(ctx, "/bot.Service/GetUserOperations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetUserOperationHistory(ctx context.Context, in *GetUserOperationHistoryRequest, opts ...grpc.CallOption) (*GetUserOperationHistoryResponse, error) {
	out := new(GetUserOperationHistoryResponse)
	err := c.cc.Invoke(ctx, "/bot.Service/GetUserOperationHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetUserInvites(ctx context.Context, in *GetUserInvitesRequest, opts ...grpc.CallOption) (*GetUserInvitesResponse, error) {
	out := new(GetUserInvitesResponse)
	err := c.cc.Invoke(ctx, "/bot.Service/GetUserInvites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetUserWallet(ctx context.Context, in *GetUserWalletRequest, opts ...grpc.CallOption) (*GetUserWalletResponse, error) {
	out := new(GetUserWalletResponse)
	err := c.cc.Invoke(ctx, "/bot.Service/GetUserWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CreateUserPayment(ctx context.Context, in *CreateUserPaymentRequest, opts ...grpc.CallOption) (*CreateUserPaymentResponse, error) {
	out := new(CreateUserPaymentResponse)
	err := c.cc.Invoke(ctx, "/bot.Service/CreateUserPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetUserPaymentStatus(ctx context.Context, in *GetUserPaymentStatusRequest, opts ...grpc.CallOption) (*GetUserPaymentStatusResponse, error) {
	out := new(GetUserPaymentStatusResponse)
	err := c.cc.Invoke(ctx, "/bot.Service/GetUserPaymentStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CheckUserKeys(ctx context.Context, in *CheckUserKeysRequest, opts ...grpc.CallOption) (*CheckUserKeysResponse, error) {
	out := new(CheckUserKeysResponse)
	err := c.cc.Invoke(ctx, "/bot.Service/CheckUserKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CallBackPayment(ctx context.Context, in *CallBackPaymentRequest, opts ...grpc.CallOption) (*CallBackPaymentResponse, error) {
	out := new(CallBackPaymentResponse)
	err := c.cc.Invoke(ctx, "/bot.Service/CallBackPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) SwitchBotState(ctx context.Context, in *SwitchBotStateRequest, opts ...grpc.CallOption) (*SwitchBotStateResponse, error) {
	out := new(SwitchBotStateResponse)
	err := c.cc.Invoke(ctx, "/bot.Service/SwitchBotState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetSymbols(ctx context.Context, in *GetSymbolsRequest, opts ...grpc.CallOption) (*GetSymbolsResponse, error) {
	out := new(GetSymbolsResponse)
	err := c.cc.Invoke(ctx, "/bot.Service/GetSymbols", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) IntegrationGetUser(ctx context.Context, in *IntegrationGetUsersSecureRequest, opts ...grpc.CallOption) (*IntegrationGetUsersSecureResponse, error) {
	out := new(IntegrationGetUsersSecureResponse)
	err := c.cc.Invoke(ctx, "/bot.Service/IntegrationGetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) IntegrationUserStatus(ctx context.Context, in *IntegrationUserStatusRequest, opts ...grpc.CallOption) (*IntegrationUserStatusResponse, error) {
	out := new(IntegrationUserStatusResponse)
	err := c.cc.Invoke(ctx, "/bot.Service/IntegrationUserStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) IntegrationUserStatistics(ctx context.Context, in *IntegrationUserStatisticsRequest, opts ...grpc.CallOption) (*IntegrationUserStatisticsResponse, error) {
	out := new(IntegrationUserStatisticsResponse)
	err := c.cc.Invoke(ctx, "/bot.Service/IntegrationUserStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	CallBack(context.Context, *CallBackRequest) (*CallBackResponse, error)
	CreateBuyOrder(context.Context, *CreateBuyOrderRequest) (*CreateBuyOrderResponse, error)
	CancelOrder(context.Context, *CancelOrderRequest) (*CancelOrderResponse, error)
	CreateSellOrder(context.Context, *CreateSellOrderRequest) (*CreateSellOrderResponse, error)
	Auth(context.Context, *AuthRequest) (*AuthResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	UpdateUserSetting(context.Context, *UpdateUserSettingRequest) (*UpdateUserSettingResponse, error)
	GetUserSetting(context.Context, *GetUserSettingRequest) (*GetUserSettingResponse, error)
	GetUserStat(context.Context, *GetUserStatRequest) (*GetUserStatResponse, error)
	GetUserPositions(context.Context, *GetUserPositionsRequest) (*GetUserPositionsResponse, error)
	GetUserOperations(context.Context, *GetUserOperationsRequest) (*GetUserOperationsResponse, error)
	GetUserOperationHistory(context.Context, *GetUserOperationHistoryRequest) (*GetUserOperationHistoryResponse, error)
	GetUserInvites(context.Context, *GetUserInvitesRequest) (*GetUserInvitesResponse, error)
	GetUserWallet(context.Context, *GetUserWalletRequest) (*GetUserWalletResponse, error)
	CreateUserPayment(context.Context, *CreateUserPaymentRequest) (*CreateUserPaymentResponse, error)
	GetUserPaymentStatus(context.Context, *GetUserPaymentStatusRequest) (*GetUserPaymentStatusResponse, error)
	CheckUserKeys(context.Context, *CheckUserKeysRequest) (*CheckUserKeysResponse, error)
	CallBackPayment(context.Context, *CallBackPaymentRequest) (*CallBackPaymentResponse, error)
	SwitchBotState(context.Context, *SwitchBotStateRequest) (*SwitchBotStateResponse, error)
	GetSymbols(context.Context, *GetSymbolsRequest) (*GetSymbolsResponse, error)
	IntegrationGetUser(context.Context, *IntegrationGetUsersSecureRequest) (*IntegrationGetUsersSecureResponse, error)
	IntegrationUserStatus(context.Context, *IntegrationUserStatusRequest) (*IntegrationUserStatusResponse, error)
	IntegrationUserStatistics(context.Context, *IntegrationUserStatisticsRequest) (*IntegrationUserStatisticsResponse, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) CallBack(context.Context, *CallBackRequest) (*CallBackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallBack not implemented")
}
func (UnimplementedServiceServer) CreateBuyOrder(context.Context, *CreateBuyOrderRequest) (*CreateBuyOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBuyOrder not implemented")
}
func (UnimplementedServiceServer) CancelOrder(context.Context, *CancelOrderRequest) (*CancelOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (UnimplementedServiceServer) CreateSellOrder(context.Context, *CreateSellOrderRequest) (*CreateSellOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSellOrder not implemented")
}
func (UnimplementedServiceServer) Auth(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (UnimplementedServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedServiceServer) UpdateUserSetting(context.Context, *UpdateUserSettingRequest) (*UpdateUserSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserSetting not implemented")
}
func (UnimplementedServiceServer) GetUserSetting(context.Context, *GetUserSettingRequest) (*GetUserSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSetting not implemented")
}
func (UnimplementedServiceServer) GetUserStat(context.Context, *GetUserStatRequest) (*GetUserStatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserStat not implemented")
}
func (UnimplementedServiceServer) GetUserPositions(context.Context, *GetUserPositionsRequest) (*GetUserPositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPositions not implemented")
}
func (UnimplementedServiceServer) GetUserOperations(context.Context, *GetUserOperationsRequest) (*GetUserOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserOperations not implemented")
}
func (UnimplementedServiceServer) GetUserOperationHistory(context.Context, *GetUserOperationHistoryRequest) (*GetUserOperationHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserOperationHistory not implemented")
}
func (UnimplementedServiceServer) GetUserInvites(context.Context, *GetUserInvitesRequest) (*GetUserInvitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInvites not implemented")
}
func (UnimplementedServiceServer) GetUserWallet(context.Context, *GetUserWalletRequest) (*GetUserWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserWallet not implemented")
}
func (UnimplementedServiceServer) CreateUserPayment(context.Context, *CreateUserPaymentRequest) (*CreateUserPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserPayment not implemented")
}
func (UnimplementedServiceServer) GetUserPaymentStatus(context.Context, *GetUserPaymentStatusRequest) (*GetUserPaymentStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPaymentStatus not implemented")
}
func (UnimplementedServiceServer) CheckUserKeys(context.Context, *CheckUserKeysRequest) (*CheckUserKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserKeys not implemented")
}
func (UnimplementedServiceServer) CallBackPayment(context.Context, *CallBackPaymentRequest) (*CallBackPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallBackPayment not implemented")
}
func (UnimplementedServiceServer) SwitchBotState(context.Context, *SwitchBotStateRequest) (*SwitchBotStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchBotState not implemented")
}
func (UnimplementedServiceServer) GetSymbols(context.Context, *GetSymbolsRequest) (*GetSymbolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSymbols not implemented")
}
func (UnimplementedServiceServer) IntegrationGetUser(context.Context, *IntegrationGetUsersSecureRequest) (*IntegrationGetUsersSecureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntegrationGetUser not implemented")
}
func (UnimplementedServiceServer) IntegrationUserStatus(context.Context, *IntegrationUserStatusRequest) (*IntegrationUserStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntegrationUserStatus not implemented")
}
func (UnimplementedServiceServer) IntegrationUserStatistics(context.Context, *IntegrationUserStatisticsRequest) (*IntegrationUserStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntegrationUserStatistics not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_CallBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallBackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CallBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bot.Service/CallBack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CallBack(ctx, req.(*CallBackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CreateBuyOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBuyOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CreateBuyOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bot.Service/CreateBuyOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CreateBuyOrder(ctx, req.(*CreateBuyOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bot.Service/CancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CancelOrder(ctx, req.(*CancelOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CreateSellOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSellOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CreateSellOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bot.Service/CreateSellOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CreateSellOrder(ctx, req.(*CreateSellOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bot.Service/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Auth(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bot.Service/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateUserSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateUserSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bot.Service/UpdateUserSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateUserSetting(ctx, req.(*UpdateUserSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetUserSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetUserSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bot.Service/GetUserSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetUserSetting(ctx, req.(*GetUserSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetUserStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetUserStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bot.Service/GetUserStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetUserStat(ctx, req.(*GetUserStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetUserPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetUserPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bot.Service/GetUserPositions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetUserPositions(ctx, req.(*GetUserPositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetUserOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetUserOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bot.Service/GetUserOperations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetUserOperations(ctx, req.(*GetUserOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetUserOperationHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserOperationHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetUserOperationHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bot.Service/GetUserOperationHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetUserOperationHistory(ctx, req.(*GetUserOperationHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetUserInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInvitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetUserInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bot.Service/GetUserInvites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetUserInvites(ctx, req.(*GetUserInvitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetUserWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetUserWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bot.Service/GetUserWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetUserWallet(ctx, req.(*GetUserWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CreateUserPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CreateUserPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bot.Service/CreateUserPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CreateUserPayment(ctx, req.(*CreateUserPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetUserPaymentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPaymentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetUserPaymentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bot.Service/GetUserPaymentStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetUserPaymentStatus(ctx, req.(*GetUserPaymentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CheckUserKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CheckUserKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bot.Service/CheckUserKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CheckUserKeys(ctx, req.(*CheckUserKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CallBackPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallBackPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CallBackPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bot.Service/CallBackPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CallBackPayment(ctx, req.(*CallBackPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_SwitchBotState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchBotStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).SwitchBotState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bot.Service/SwitchBotState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).SwitchBotState(ctx, req.(*SwitchBotStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetSymbols_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSymbolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetSymbols(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bot.Service/GetSymbols",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetSymbols(ctx, req.(*GetSymbolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_IntegrationGetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntegrationGetUsersSecureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).IntegrationGetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bot.Service/IntegrationGetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).IntegrationGetUser(ctx, req.(*IntegrationGetUsersSecureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_IntegrationUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntegrationUserStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).IntegrationUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bot.Service/IntegrationUserStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).IntegrationUserStatus(ctx, req.(*IntegrationUserStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_IntegrationUserStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntegrationUserStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).IntegrationUserStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bot.Service/IntegrationUserStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).IntegrationUserStatistics(ctx, req.(*IntegrationUserStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bot.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CallBack",
			Handler:    _Service_CallBack_Handler,
		},
		{
			MethodName: "CreateBuyOrder",
			Handler:    _Service_CreateBuyOrder_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _Service_CancelOrder_Handler,
		},
		{
			MethodName: "CreateSellOrder",
			Handler:    _Service_CreateSellOrder_Handler,
		},
		{
			MethodName: "Auth",
			Handler:    _Service_Auth_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _Service_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUserSetting",
			Handler:    _Service_UpdateUserSetting_Handler,
		},
		{
			MethodName: "GetUserSetting",
			Handler:    _Service_GetUserSetting_Handler,
		},
		{
			MethodName: "GetUserStat",
			Handler:    _Service_GetUserStat_Handler,
		},
		{
			MethodName: "GetUserPositions",
			Handler:    _Service_GetUserPositions_Handler,
		},
		{
			MethodName: "GetUserOperations",
			Handler:    _Service_GetUserOperations_Handler,
		},
		{
			MethodName: "GetUserOperationHistory",
			Handler:    _Service_GetUserOperationHistory_Handler,
		},
		{
			MethodName: "GetUserInvites",
			Handler:    _Service_GetUserInvites_Handler,
		},
		{
			MethodName: "GetUserWallet",
			Handler:    _Service_GetUserWallet_Handler,
		},
		{
			MethodName: "CreateUserPayment",
			Handler:    _Service_CreateUserPayment_Handler,
		},
		{
			MethodName: "GetUserPaymentStatus",
			Handler:    _Service_GetUserPaymentStatus_Handler,
		},
		{
			MethodName: "CheckUserKeys",
			Handler:    _Service_CheckUserKeys_Handler,
		},
		{
			MethodName: "CallBackPayment",
			Handler:    _Service_CallBackPayment_Handler,
		},
		{
			MethodName: "SwitchBotState",
			Handler:    _Service_SwitchBotState_Handler,
		},
		{
			MethodName: "GetSymbols",
			Handler:    _Service_GetSymbols_Handler,
		},
		{
			MethodName: "IntegrationGetUser",
			Handler:    _Service_IntegrationGetUser_Handler,
		},
		{
			MethodName: "IntegrationUserStatus",
			Handler:    _Service_IntegrationUserStatus_Handler,
		},
		{
			MethodName: "IntegrationUserStatistics",
			Handler:    _Service_IntegrationUserStatistics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bot/service.proto",
}
